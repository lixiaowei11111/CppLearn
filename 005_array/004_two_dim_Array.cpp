#include<iostream>

using namespace std;

int main4() {

	// 1. 二维数组的四种定义方式


	//1. 数据类型 数组名[行数][列数]
	int arr[2][2];
	arr[0][0] = 1;
	arr[0][1] = 2;
	arr[1][0] = 3;
	arr[1][1] = 4;

	// 2. 数据类型 数组名[行数][列数]={{数据1,数据2},{数据3,数据4}}
	int arr2[2][2] = { {1,2},{3,4} };

	// 3. 数据类型 数组名[行数][列数]={数据1,数据2,数据3,数据4}
	int arr3[2][2] = { 1,2,3,4 };

	// 4.数据类型 数组名[][列数]={数据1,数据2,数据3,数据4}
	int arr4[][2] = { 1,2,3,4 };

	// 5.二维数组大小
	cout << "二维数组arr 所占用的内存大小:" << sizeof(arr) << endl; //16

	//6. 二维数组 一行所占用的大小
	cout << "二维数组arr 第一行所占用的内存大小:" << sizeof(arr[0]) << endl;// 8

	//7. 二维数组单个元素 占用空间大小
	cout << "二维数组arr 第一个元素所占用的内存大小:" << sizeof(arr[0][0]) << endl;//4

	// 8. 二维数组打印 首地址
	cout << "二维数组arr 地址 16进制:" << arr << endl; //00000004C26FF618
	cout << "二维数组arr 地址 10进制:" << (unsigned int)arr << endl;//3076389272

	// 9. 二维数组的行数  总占用空间/一行占用的空间 == 行数
	cout << "二位数组arr的行数为:" << (sizeof(arr) / sizeof(arr[0])) << endl; //2
	//10. 二维数组的列数 一行占用空间/一个占用的空间 == 列数
	cout << "二位数组arr的列数为:" << (sizeof(arr[0]) / sizeof(arr[0][0])) << endl; //2

	// 11. 第一行首地址 和 第二行首地址
	cout << "arr第一行首地址" << (unsigned long)arr[0]<<"\n" << "arr第二行首地址" << (unsigned long)arr[1] << endl;
	// 3551524568 3551524576  // 相差12个byte  正好是对应的3 个int 元素

	//12. 查看第一个元素的地址, 使用 取址符 &
	cout << "arr 第一个元素的地址" << (int)&arr[0][0] << endl;// 611710696 ,不适用取址符得到的结果是 1

	system("pause");
	return 0;
}